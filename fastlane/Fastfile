default_platform(:ios)

platform :ios do
  before_all do
    keychain_password = '12345678'

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    if ENV["BUILD_PODS"] == 'true'
      cocoapods(
        podfile: ENV["PODS_PATH"],
        use_bundle_exec: false
      )
    end
  end

  desc "Build"
  lane :build do
    api_key = app_store_connect_api_key(
      key_id: ENV['APPLE_KEY_ID'],
      issuer_id: ENV['APPLE_KEY_ISSUER_ID'],
      key_content: ENV['APPLE_KEY_CONTENT'],
      in_house: false # optional but may be required if using match/sigh
    )

    # Parse bundle IDs - support comma-separated list
    bundle_ids = ENV['IOS_APP_ID'] ? ENV['IOS_APP_ID'].split(',').map(&:strip) : []
    primary_bundle_id = bundle_ids.first

    use_workspace = !ENV['WORKSPACE_PATH'].empty?

    # Match with all bundle IDs
    if bundle_ids.any?
      bundle_ids.each do |bundle_id|
        match(type: ENV['MATCH_BUILD_TYPE'], api_key: api_key, app_identifier: bundle_id)
      end
    else
      match(type: ENV['MATCH_BUILD_TYPE'], api_key: api_key)
    end

    if ENV['INCREMENT_BUILD_NUMBER'] == 'true' && primary_bundle_id
      increment_build_number(
        xcodeproj: ENV['PROJECT_PATH'],
        build_number: (latest_testflight_build_number(
          app_identifier: primary_bundle_id,
          api_key: api_key,
          team_name: ENV["TEAM_NAME"],
        ) + 1).to_s,
      )
    end

    build_app(
      workspace: use_workspace ? ENV['WORKSPACE_PATH'] : nil,
      project: !use_workspace ? ENV['PROJECT_PATH'] : nil,
      configuration: ENV['CONFIGURATION'],
      scheme: ENV['SCHEME'],
      output_directory: File.dirname(ENV['OUTPUT_PATH']),
      output_name: File.basename(ENV['OUTPUT_PATH']),
      clean: true,
      export_method: ENV['EXPORT_METHOD'],
      export_team_id: ENV['TEAM_ID'],
      silent: true,
      export_options: bundle_ids.any? ? {
        provisioningProfiles: bundle_ids.each_with_object({}) do |bundle_id, profiles|
          profiles[bundle_id] = "match #{ENV['MATCH_BUILD_TYPE'].capitalize} #{bundle_id}"
        end,
        # manifest: {
          # appUrl: ""
        # }
      } : nil
    )

    if ENV["BROWSERSTACK_UPLOAD"] == 'true'
      upload_to_browserstack_app_live(
        browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        file_path: ENV["OUTPUT_PATH"]
      )
    end

    if ENV["FIREBASE_UPLOAD"] == 'true'
      service_credentials_filename = File.join(ENV['OUTPUT_PATH'], "firebase.json")
      File.write(service_credentials_filename, ENV["FIREBASE_SERVICE_CREDENTIALS_FILE"])
      firebase_app_distribution(
        # browserstack_username: ENV["BROWSERSTACK_USERNAME"],
        # browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
        # file_path: ENV["OUTPUT_PATH"],
        service_credentials_file: service_credentials_filename
      )
      File.delete(service_credentials_filename)
    else
      say("Not uploading to Firebase because FIREBASE_UPLOAD is set to", ENV["FIREBASE_UPLOAD"])
    end

    if ENV["TESTFLIGHT_UPLOAD"] == 'true' && primary_bundle_id
      upload_to_testflight(
        ipa: File.join(File.dirname(ENV['OUTPUT_PATH']), File.basename(ENV['OUTPUT_PATH'])),
        api_key: api_key,
        app_identifier: primary_bundle_id,
        team_name: ENV['TEAM_NAME'],
        skip_waiting_for_build_processing: true,
        skip_submission: true,
      )
    end
  end

  after_all do
    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end
